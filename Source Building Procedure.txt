Raspberry Pi 4 Latest image 2022-09-06-raspios-bullseye-armhf-full.img.xz
Note:https://askubuntu.com/questions/1193232/how-do-i-use-an-img-xz-file-or-get-an-img-file-from-it
 unxz image 2022-09-06-raspios-bullseye-armhf-full.img.xz
---------------------------------------------------------------------------------------------
Source Building procedure for vsomeip
Note: go to link https://github.com/COVESA/vsomeip  -- for someip library 
For Detailed Steps Follow the link: https://chowdera.com/2022/04/202204010100558341.html
1.Open the termainal and go to home directory using below command
cd /home/ 
2. Create a development director in  /home/ using below command
mkdir development
cd development
3. Download the vsome ip source code using below command 
sudo git clone https://github.com/COVESA/vsomeip
4. Install the library dependancies using below command
sudo apt-get install libboost-system1.74-dev libboost-thread1.74-dev libboost-log1.74-dev
sudo apt-get install libsystemd-dev dlt-daemon
4a. Install automotive-dlt package & googletest tool packages
sudo apt-get install libdlt-dev
sudo apt-get install googletest
sudo apt-get install googletest-tools
sudo apt-get install libgtest-dev
add the GTEST_ROOT path in CMakeLists.txt
sudo gedit ../CMakeLists.txt
set (GTEST_ROOT "/usr/src/gtest")
save and exit
5. build the documentation asciidoc, source-highlight, doxygen and graphviz using below command 
sudo apt-get install asciidoc source-highlight doxygen graphviza

6. Go vsomeip folder and follow the below commands for compiling the code
cd vsomeip
sudo mkdir build
cd build 
sudo cmake -DENABLE_SIGNAL_HANDLING=1 ..

Note:This parameter ensures that you can kill your vsomeip application without any problems (otherwise it might be that the shared memory segment /dev/shm/vsomeip is not be correctly removed when you stop the application with Ctrl-C).

sudo make 
sudo make install

Note: 6a.If Configuration module could not be loaded! message appears then fire the below commands to refresh the library cache of your linux system.
Link: https://github.com/COVESA/vsomeip/issues/235
sudo ldconfig
ldconfig -p | grep libvsomeip

6a. Go vsomeip folder  and follow the below commands for compiling the code

7. Use this for hello_world example compilation
Link: https://github.com/COVESA/vsomeip/issues/43
cd vsomeip_server/build
sudo cmake --build . --target hello_world
sudo make hello_world_service hello_world_client
LD_LIBRARY_PATH=/home/santhosh/Development/vsomeip_server/vsomeip/build

export VSOMEIP_CONFIGURATION=/home/santhosh/Development/vsomeip/examples/hello_world/helloworld-local.json 
export VSOMEIP_APPLICATION_NAME=hello_world_service 

8. Steps to run notify-sample
route add -net 224.0.0.0/4 eth0
route add 224.244.224.245 dev eth0
cd vsomeip/build/examples
export VSOMEIP_CONFIGURATION=/home/santhosh/Development/vsomeip/config/vsomeip-local.json
export VSOMEIP_APPLICATION_NAME=service-sample
./notify-sample

Open second terminal and then run the below commands for subscribe-sample
cd vsomeip/build/examples
export VSOMEIP_CONFIGURATION=/home/santhosh/Development/vsomeip/config/vsomeip-local.json
export VSOMEIP_APPLICATION_NAME=client-sample
./subscribe-sample

--------------------------Putty Access------------------------------------------------------------------
https://www.tecmint.com/fix-no-route-to-host-ssh-error-in-linux/

Qwer@123

---------------------------------------------Source Building Procedure for Adaptive autosar----------------------------------------------
1. Create ara-project directory
$mkdir ara-project && cd ara-project
2. Copy the apd-user-guide_2021-11-18-20220910T002216Z-001.zip file to ara-project director and extrat ara-project folder 
3. Check the contents of ara-project folder 
ara-project$tree -L 1 
.
├── apd-user-guide_2021-
11
├── ara-api
├── fetch-dependencies.sh
├── README.md
├── sample-applications
└── yocto-layers

4. Install the libraries 
sudo apt install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat cpio 
sudo apt install python 
sudo apt install python3 python3-pip python3-pexpect 
sudo apt install xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev 
sudo apt install pylint pylint3 
sudo apt install xterm make xsltproc docbook-utils fop dblatex xmlto

5. Install Docker Engine on Ubuntu
Link: https://docs.docker.com/engine/install/ubuntu/

Prerequisites - OS requirements

To install Docker Engine, you need the 64-bit version of one of these Ubuntu versions:
    Ubuntu Jammy 22.04 (LTS)
    Ubuntu Impish 21.10
    Ubuntu Focal 20.04 (LTS)
    Ubuntu Bionic 18.04 (LTS)
Docker Engine is supported on x86_64 (or amd64), armhf, arm64, and s390x architectures.

6. Uninstall old versions
   Older versions of Docker were called docker, docker.io, or docker-engine. If these are installed, uninstall them:
   $sudo apt-get remove docker docker-engine docker.io containerd runc

7.Install Docker using the repository

Before you install Docker Engine for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.

Set up the repository
    Update the apt package index and install packages to allow apt to use a repository over HTTPS:
 $sudo apt-get update

 $sudo apt-get install ca-certificates curl gnupg lsb-release

Add Docker’s official GPG key:
 sudo mkdir -p /etc/apt/keyrings
 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

Use the following command to set up the repository:
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

8. Install Docker Engine
Update the apt package index, and install the latest version of Docker Engine, containerd, and Docker Compose, or go to the next step to install a specific version:

sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

Note: Receiving a GPG error when running apt-get update?
Your default umask may not be set correctly, causing the public key file for the repo to not be detected. Run the following command and then try to update your repo again: 
sudo chmod a+r /etc/apt/keyrings/docker.gpg.

9. To install a specific version of Docker Engine, list the available versions in the repo, then select and install:
a. List the versions available in your repo:
 $apt-cache madison docker-ce
--------------------------------------------
 docker-ce | 5:20.10.18~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
 docker-ce | 5:20.10.17~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
 docker-ce | 5:20.10.16~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
 docker-ce | 5:20.10.15~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
 docker-ce | 5:20.10.14~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
 docker-ce | 5:20.10.13~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
--------------------------------------------
b. Install a specific version using the version string from the second column, for example, 5:20.10.18~3-0~ubuntu-jammy . for Ubuntu 22.04
Note:Use below version for ubuntu version else docker may not work as intended
 	Ubuntu Jammy 22.04 (LTS)
    	Ubuntu Impish 21.10
    	Ubuntu Focal 20.04 (LTS)
    	Ubuntu Bionic 18.04 (LTS)


sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io docker-compose-plugin
sudo apt-get install docker-ce=5:20.10.18~3-0~ubuntu-jammy docker-ce-cli=5:20.10.18~3-0~ubuntu-jammy containerd.io docker-compose-plugin

c. Set HTTP/HTTPS proxy
Follow the link: https://docs.docker.com/config/daemon/systemd/
i. Create a systemd drop-in directory for the docker service:
sudo mkdir -p /etc/systemd/system/docker.service.d

ii. Create a file named /etc/systemd/system/docker.service.d/http-proxy.conf that adds the HTTP_PROXY environment variable:
[Service]
Environment="HTTP_PROXY=http://proxy.example.com:80"

If you are behind an HTTPS proxy server, set the HTTPS_PROXY environment variable:
[Service]
Environment="HTTPS_PROXY=https://proxy.example.com:443"

Multiple environment variables can be set; to set both a non-HTTPS and a HTTPs proxy;
[Service]
Environment="HTTP_PROXY=http://proxy.example.com:80"
Environment="HTTPS_PROXY=https://proxy.example.com:443"

10. Verify that Docker Engine is installed correctly by running the hello-world image.

sudo service docker start
sudo docker run hello-world

    This command downloads a test image and runs it in a container. When the container runs, it prints a message and exits.

Docker Engine is installed and running. The docker group is created but no users are added to it. You need to use sudo to run Docker commands. Continue to Linux postinstall to allow non-privileged users to run Docker commands and for other optional configuration steps.

11. Run sudo apt-get update && sudo apt-get upgrade after installing the docker

12. Prepare a Docker image environment
cd ara-project/yocto-layers/docker/current_yocto/
~/ara-project/yocto-layers/docker/current_yocto$ make build
./fetch-dependencies.sh
source yocto-layers/ara-init-build-env
echo "DL_DIR = \"$HOME/yocto/downloads\"" >> conf/local.conf
echo "SSTATE_DIR = \"$HOME/yocto/sstate-cache\"" >> conf/local.conf

13. To create SD card image add the below line in local.conf file
Link: https://raspberrypi.stackexchange.com/questions/57155/how-do-i-use-yocto-to-build-an-sdcard-image-for-my-raspberry-pi-3-model-b
IMAGE_FSTYPES = "tar.xz ext3 rpi-sdimg"

14. builds for qemux86 MACHINE
bitbake core-image-apd-devel

15. builds for raspberrypi4
MACHINE=raspberrypi4 bitbake core-image-apd-devel 

Now the build process starts and it will take a couple of hours to finish it the first time. When the build is complete there shouldbe the following directory
tmp/deploy/images/$MACHINE/ which contains the build result.

16. Writing an image file to SD-card
After you plug the USB stick with the SD-Card, run the following command to identify and un-mount the USB-Stick with the SD-Card.
$lsblk
The lsblk command lists all block devices currently attached to your linux system along with the paths

17. To un-mount the i-th partition, where X can be any letter.
$sudo umount /dev/sdXi
ex: sudo umount /dev/sdb1  (In this ex: The /dev/sdb1 is the mount point of SD Card (This may change from PC to PC))

18. Once the SD Card mount point is identifyed unmount all partitions of SD Card before writing the image on the SD Card
$sudo umount /dev/sdb* 
Video Link: https://www.youtube.com/watch?v=zVLKPtGCtN4

19.write the generated image using the “dd” tool:
$sudo dd bs=4M  if=core-image-apd-devel-raspberrypi4.rpi-sdimg of=/dev/sdX conv=fsync status=progress
Ex: 
$sudo dd bs=4M  if=core-image-apd-devel-raspberrypi3.rpi-sdimg of=/dev/sdb conv=fsync status=progress
Note: The /dev/sdX only to be used since the partition shall be created by the above command 
$sync      -- This command is very important else the files may not write on the SD card


Note:  SD Card recovery link https://unix.stackexchange.com/questions/315063/mount-wrong-fs-type-bad-option-bad-superblock

--------------------------------------------------------------------------------------------